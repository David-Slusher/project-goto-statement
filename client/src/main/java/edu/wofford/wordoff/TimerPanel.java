package edu.wofford.wordoff;

import java.util.*;
import java.util.List;
import java.io.*;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.Timer;
import javax.swing.SwingUtilities;


/**
* TimerListener
* Custom listener used inside of the TimerPanel class to relay events to any
* class that implements the TimerListener interface
*/
interface TimerListener{
  void timerExpired();
}

/**
* Timer Panel
* Implements a JPanel with a countdown timer for use with the JFrame generated by
* the AnagramsGUI class. When the timer reactes zero the JButton and JTextField
* objects within the AnagramsGUI window are disabled.
<br>
* The following is an example of how to intialize a {@code TimerPanel} object using
* the various {@code TimerPanel} constructors and how to use the included methods.
* <pre>{@code
* //Default constructor
* TimerPanel panel = new TimerPanel();
*
* //Constructor with starting time
* int startingTime = 30;
* TimerPanel panel = new TimerPanel(startingTime);
*
* //addTimerListener method adds a TimerListener object to the TimerPanel and allows TimerPanel to fire off events
* //example case: within a class that implements TimerListener
* public class someClass extends JFrame implements TimerListener{
* ...
*   public someClass(){
*     TimerPanel panel = new TimerPanel(30);
*     timerPanel.addTimerListener(this);
*     ...
*   }
* ...
* }
*
* //timerReachesZero method used to fire off a timerExpired event
* //example case: within the TimerPanel actionlistener
* public void actionPerformed(ActionEvent event) {
*   currentTime -= 1;
*   ...
*   if(currentTime <= 0) {
*     countdownTimer.stop();
*     timerReachesZero();
*   }
* }
*
* //getStartTime method used to get the starting time of a TimerPanel object
* TimerPanel panelOne = new TimerPanel();
* TimerPanel panelTwo = new TimerPanel(30);
* int panelOneStartTime = panelOne.getStartTime();
* //panelOneStartTime contains 0
* int panelTwoStartTime = panelTwo.getStartTime();
* //panelTwoStartTime contains 30
*
* //setStartTime method used to set the starting time of a TimerPanel object
* TimerPanel panel = new TimerPanel();
* panel.setStartTime(30);
* int startingTime = panel.getStartTime();
* //startingTime contains 30
*
* //getCurrentTime method used to get the current time of a TimerPanel object
* //startTimer method used to start the TimerPanel countdown timer
* //stopTimer method used to stop the TimerPanel countdown timer
* //resetTimer method used to reset the TimerPanel countdown timer to its original starting time
* TimerPanel panel = new TimerPanel(10);
* panel.startTimer();
* //... after waiting 5 seconds ...
* panel.stopTimer();
* int currentPanelTime = panel.getCurrentTime();
* //currentPanelTime contains 5
* panel.resetTimer();
* currentPanelTime = panel.getCurrentTime();
* //currentPanelTime contains 10
*
* }</pre>
*
*/

public class TimerPanel extends JPanel implements ActionListener {
  private Timer countdownTimer;
  private int currentTime;
  private int startTime;
  private int difficulty;
  private String selectedWord;
  private JPanel timerPanel;
  private JLabel timeBox;
  private TimerListener listeners;

/**
* Action performed every second once the timer has started. Continues until the
* {@code currentTime} reaches zero or the {@code stopTimer()} method is called.
*/
  public void actionPerformed(ActionEvent event) {
    currentTime -= 1;
    timeBox.setText(String.format("%02d:%02d", currentTime / 60, currentTime % 60));
    if(currentTime <= 0) {
      countdownTimer.stop();
      timerReachesZero();
    }
	}

/**
* Adds a TimerListener object to the TimerPanel and allows for the TimerPanel to
* fire off events to any class that implemented the TimerListener interface.
*
* @param listener A TimerListener object to be added.
*/
  public void addTimerListener(TimerListener listener){
    this.listeners = listener;
  }

/**
* Fires off a {@code TimerListener timerExpired()} event when called.
*/
  public void timerReachesZero(){
    if(listeners != null){
      listeners.timerExpired();
    }
  }

/**
* Default Constructor.
* The default constructor calls the
* {@link #TimerPanel(int) TimerPanel(startTime)} constructor with starting time 0.
*/
  public TimerPanel() {
    this(0);
  }

/**
* Constructor with starting time.
* Initilizes the {@code startTime} and {@code currentTime} using the given
* {@code startTime} parameter. Creates a new {@code Timer} object named
* {@code countdownTimer} that call the {@code ActionListener} every second.
* two {@code JLabel} objects are created that display the String "Time Remaining"
* and the {@code currentTime} formated as "mm:ss".
*
* @param startTime The starting time of the timer.
*/
  public TimerPanel(int startTime) {
    this.startTime = startTime;
    this.currentTime = startTime;
    this.difficulty = difficulty;
    this.countdownTimer = new Timer(1000, null);
    this.countdownTimer.addActionListener(this);

    setLayout(new GridLayout (1, 2, 30, 20));
    setBorder(new EmptyBorder(20, 30, 20, 30));
    JLabel timeRemaining = new JLabel("Time Remaining");
    timeRemaining.setBorder(new LineBorder(Color.GRAY));
    timeRemaining.setHorizontalAlignment(JLabel.CENTER);
    timeRemaining.setPreferredSize(new Dimension(20, 40));

		timeBox = new JLabel(String.format("%02d:%02d", currentTime / 60, currentTime % 60));
		timeBox.setName("timer");
    timeBox.setBorder(new LineBorder(Color.GRAY));
    timeBox.setHorizontalAlignment(JLabel.CENTER);
    timeBox.setPreferredSize(new Dimension(20, 40));
		add(timeRemaining);
		add(timeBox);
  }

/**
* Returns the {@code startTime} of the timer.
*
* @return An {@code int} representing the starting time of the
* countdown timer
*/
  public int getStartTime() {
    return startTime;
  }

/**
* Sets a new {@code startTime} of the timer.
*
* @param newTime An {@code int} representing the new starting time of the
* countdown timer
*/
  public void setStartTime(int newTime) {
    this.startTime = newTime;
  }

/**
* Returns the {@code currentTime} of the timer.
*
* @return An {@code int} representing the current time of the
* countdown timer
*/
  public int getCurrentTime() {
    return currentTime;
  }

/**
* Starts the {@code countdownTimer}.
*/
  public void startTimer() {
    countdownTimer.start();
  }

/**
* Stops the {@code countdownTimer}.
*/
  public void stopTimer() {
    countdownTimer.stop();
  }

/**
* Resets the {@code countdownTimer} by setting the {@code currentTime} to the
* {@code startTime}.
*/
  public void resetTimer() {
    this.currentTime = startTime;
  }

}
